CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)

PROJECT(Textured VERSION 0.0.1)

SET(DUSK_PATH $ENV{DUSK_INSTALL_DIR})
IF("${DUSK_PATH}" STREQUAL "")
    IF(EXISTS "$ENV{HOME}/.duskconfig")
        FILE(READ "$ENV{HOME}/.duskconfig" tmp)
        STRING(STRIP "${tmp}" DUSK_PATH)
    ENDIF()
ENDIF()
IF("${DUSK_PATH}" STREQUAL "")
    GET_FILENAME_COMPONENT(DUSK_PATH "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Dusk;Path]" ABSOLUTE)
ENDIF()

MESSAGE("DUSK_PATH ${DUSK_PATH}")

INCLUDE(${DUSK_PATH}/cmake/Config.cmake)
INCLUDE(${DUSK_PATH}/cmake/Compiler.cmake)

MESSAGE("DUSK_ENGINE_LIBRARY ${_DUSK_ENGINE_LIBRARY}")
MESSAGE("DUSK_EDITOR_LIBRARY ${_DUSK_EDITOR_LIBRARY}")

INCLUDE_DIRECTORIES(
    include/
    ${_DUSK_ENGINE_INCLUDE_DIRS}
    ${_DUSK_EDITOR_INCLUDE_DIRS}
)

SET(_PROJECT_FILENAME ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.duskproj)

SET(_EXECUTABLE ${PROJECT_NAME})
SET(_EDITOR     ${PROJECT_NAME}-Editor)
SET(_LIBRARY    ${PROJECT_NAME}-Library)
SET(_CACHE      ${PROJECT_NAME}.duskcache)

FILE(GLOB_RECURSE _INCLUDES RELATIVE ${CMAKE_SOURCE_DIR} include/*.hpp)
FILE(GLOB_RECURSE _SOURCES  RELATIVE ${CMAKE_SOURCE_DIR} src/*.cpp)

ADD_CUSTOM_TARGET(
    ${_CACHE}
    COMMAND ${_DUSK_PREPROCESSOR} cache ${_CACHE} ${_PROJECT_FILE} ${_INCLUDES} ${_SOURCES}
    DEPENDS ${_INCLUDES} ${_SOURCES}
)

IF(WIN32)
    ADD_LIBRARY(${_LIBRARY}
        ${_INCLUDES}
        ${_SOURCES}
    )
ELSE()
    ADD_LIBRARY(${_LIBRARY} SHARED
        ${_INCLUDES}
        ${_SOURCES}
    )
ENDIF()

ADD_DEPENDENCIES(${_LIBRARY} ${_CACHE})

CONFIGURE_FILE(
    ${_DUSK_ENGINE_MAIN}
    EngineMain.gen.cpp
)

ADD_EXECUTABLE(${_EXECUTABLE}
    EngineMain.gen.cpp
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    ${_LIBRARY}
    ${_DUSK_ENGINE_LIBRARIES}
)

# Debug-only libraries
FOREACH(debug_lib IN ITEMS ${_DUSK_ENGINE_LIBRARIES_DEBUG})
    TARGET_LINK_LIBRARIES(
        ${PROJECT_NAME}
        debug ${debug_lib}
    )
ENDFOREACH()

# Release-only libraries
FOREACH(release_lib IN ITEMS ${_DUSK_ENGINE_LIBRARIES_RELEASE})
    TARGET_LINK_LIBRARIES(
        ${PROJECT_NAME}
        optimized ${release_lib}
    )
ENDFOREACH()

CONFIGURE_FILE(
    ${_DUSK_EDITOR_MAIN}
    EditorMain.gen.cpp
)

ADD_EXECUTABLE(${_EDITOR}
    EditorMain.gen.cpp
)

TARGET_LINK_LIBRARIES(${_EDITOR}
    ${_LIBRARY}
    ${_DUSK_ENGINE_LIBRARIES}
    ${_DUSK_EDITOR_LIBRARIES}
)

SET(_ASSET_PATH "${_ASSET_PATH}:${CMAKE_SOURCE_DIR}/../assets:${CMAKE_SOURCE_DIR}/assets")
ADD_DEFINITIONS(-DASSET_PATH="${_ASSET_PATH}")

# Debug-only libraries
FOREACH(debug_lib IN ITEMS ${_DUSK_EDITOR_LIBRARIES_DEBUG})
    TARGET_LINK_LIBRARIES(
        ${_EDITOR}
        debug ${debug_lib}
    )
ENDFOREACH()

# Release-only libraries
FOREACH(release_lib IN ITEMS ${_DUSK_EDITOR_LIBRARIES_RELEASE})
    TARGET_LINK_LIBRARIES(
        ${_EDITOR}
        optimized ${release_lib}
    )
ENDFOREACH()

###
### Automation
###

FILE(GLOB_RECURSE _ASSETS RELATIVE ${CMAKE_SOURCE_DIR} "assets/*")
FILE(GLOB_RECURSE _DUSK_ASSETS RELATIVE ${_DUSK_DIR} "assets/*")

# Copy assets to build directory
ADD_CUSTOM_TARGET(copy-assets ALL)
ADD_DEPENDENCIES(${_LIBRARY} copy-assets)
ADD_CUSTOM_COMMAND(
    OUTPUT
    TARGET copy-assets PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${CMAKE_SOURCE_DIR}/assets ${CMAKE_BINARY_DIR}/assets
    COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${_DUSK_DIR}/assets ${CMAKE_BINARY_DIR}/assets
)

SET_TARGET_PROPERTIES(
    copy-assets
    PROPERTIES FOLDER "automation"
)
