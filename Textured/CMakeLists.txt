CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)

GET_FILENAME_COMPONENT(FOLDER_NAME ${CMAKE_SOURCE_DIR} NAME)

PROJECT(${FOLDER_NAME} VERSION 0.0.1)

SET(DUSK_PATH $ENV{DUSK_INSTALL_DIR})
IF("${DUSK_PATH}" STREQUAL "")
    IF(EXISTS "$ENV{HOME}/.duskconfig")
        FILE(READ "$ENV{HOME}/.duskconfig" tmp)
        STRING(STRIP "${tmp}" DUSK_PATH)
    ENDIF()
ENDIF()
IF("${DUSK_PATH}" STREQUAL "")
    GET_FILENAME_COMPONENT(DUSK_PATH "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Dusk;Path]" ABSOLUTE)
ENDIF()

OPTION(DEV_MODE "Build the engine with the project" FALSE)

MESSAGE("DUSK_PATH ${DUSK_PATH}")

INCLUDE(${DUSK_PATH}/cmake/Config.cmake)
INCLUDE(${DUSK_PATH}/cmake/Compiler.cmake)

MESSAGE("DUSK_ENGINE_LIBRARY ${_DUSK_ENGINE_LIBRARY}")
MESSAGE("DUSK_EDITOR_LIBRARY ${_DUSK_EDITOR_LIBRARY}")

INCLUDE_DIRECTORIES(
    ${CMAKE_SOURCE_DIR}
    ${_DUSK_ENGINE_INCLUDE_DIRS}
    ${_DUSK_EDITOR_INCLUDE_DIRS}
)

SET(_PROJECT_FILENAME ${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.duskproj)

SET(_EXECUTABLE ${PROJECT_NAME})
SET(_EDITOR     ${PROJECT_NAME}-Editor)
SET(_LIBRARY    ${PROJECT_NAME}-Library)
SET(_CACHE      ${PROJECT_NAME}.duskcache)

FILE(GLOB_RECURSE _INCLUDES RELATIVE ${CMAKE_SOURCE_DIR} src/*.hpp)
FILE(GLOB_RECURSE _SOURCES  RELATIVE ${CMAKE_SOURCE_DIR} src/*.cpp)

ADD_CUSTOM_TARGET(
    ${_CACHE}
    COMMAND ${_DUSK_PREPROCESSOR} cache ${_CACHE} ${PROJECT_NAME} ${_PROJECT_FILENAME} ${_INCLUDES} ${_SOURCES}
    DEPENDS ${_INCLUDES} ${_SOURCES}
)

IF(WIN32)
    ADD_LIBRARY(${_LIBRARY}
        ${_INCLUDES}
        ${_SOURCES}
    )
ELSE()
    ADD_LIBRARY(${_LIBRARY} SHARED
        ${_INCLUDES}
        ${_SOURCES}
    )
ENDIF()

ADD_DEPENDENCIES(${_LIBRARY} ${_CACHE})

ADD_CUSTOM_COMMAND(
    OUTPUT EngineMain.gen.cpp
    COMMAND ${_DUSK_PREPROCESSOR} engine-main EngineMain.gen.cpp ${_CACHE}
    DEPENDS ${_CACHE}
)

ADD_EXECUTABLE(${_EXECUTABLE}
    EngineMain.gen.cpp
)

TARGET_LINK_LIBRARIES(${PROJECT_NAME}
    ${_LIBRARY}
    ${_DUSK_ENGINE_LIBRARIES}
)

# Debug-only libraries
FOREACH(debug_lib IN ITEMS ${_DUSK_ENGINE_LIBRARIES_DEBUG})
    TARGET_LINK_LIBRARIES(
        ${PROJECT_NAME}
        debug ${debug_lib}
    )
ENDFOREACH()

# Release-only libraries
FOREACH(release_lib IN ITEMS ${_DUSK_ENGINE_LIBRARIES_RELEASE})
    TARGET_LINK_LIBRARIES(
        ${PROJECT_NAME}
        optimized ${release_lib}
    )
ENDFOREACH()

ADD_CUSTOM_COMMAND(
    OUTPUT EditorMain.gen.cpp
    COMMAND ${_DUSK_PREPROCESSOR} editor-main EditorMain.gen.cpp ${_CACHE}
    DEPENDS ${_CACHE}
)

ADD_EXECUTABLE(${_EDITOR}
    EditorMain.gen.cpp
)

IF(WIN32)
    TARGET_LINK_LIBRARIES(${_EDITOR}
        ${_LIBRARY}
        ${_DUSK_ENGINE_LIBRARIES}
        ${_DUSK_EDITOR_LIBRARIES}
    )
ELSE()
    TARGET_LINK_LIBRARIES(${_EDITOR}
        #${_LIBRARY}
        ${_DUSK_ENGINE_LIBRARIES}
        ${_DUSK_EDITOR_LIBRARIES}
    )
ENDIF()

SET(ASSET_PATH "${_DUSK_ASSET_PATH}@${CMAKE_SOURCE_DIR}/../assets@${CMAKE_SOURCE_DIR}/assets@${CMAKE_BINARY_DIR}/assets")
ADD_DEFINITIONS(-DDUSK_ASSET_PATH="${ASSET_PATH}")

# Debug-only libraries
FOREACH(debug_lib IN ITEMS ${_DUSK_EDITOR_LIBRARIES_DEBUG})
    TARGET_LINK_LIBRARIES(
        ${_EDITOR}
        debug ${debug_lib}
    )
ENDFOREACH()

# Release-only libraries
FOREACH(release_lib IN ITEMS ${_DUSK_EDITOR_LIBRARIES_RELEASE})
    TARGET_LINK_LIBRARIES(
        ${_EDITOR}
        optimized ${release_lib}
    )
ENDFOREACH()

###
### Automation
###

IF(DEV_MODE)
    ADD_CUSTOM_TARGET(build-engine ALL)
    ADD_DEPENDENCIES(${_LIBRARY} build-engine)
    ADD_CUSTOM_COMMAND(
        OUTPUT
        TARGET build-engine
        COMMAND ${CMAKE_COMMAND} --build .
        WORKING_DIRECTORY ${DUSK_PATH}/build
    )
ENDIF()

SET_PROPERTY(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT "${_EDITOR}")
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
